class Solution {
private:
    vector<vector<int>> result; 
    vector<int> path; 
    void backtracking(int n, int k, int startIndex) {
        if (path.size() == k) {
            result.push_back(path);
            return;
        }
        for (int i = startIndex; i < n - (k - path.size()) + 1; i++) {
            path.push_back(i);
            backtracking(n, k, i + 1); 
            path.pop_back(); 
        }
    }
public:
    vector<vector<int>> combine(int n, int k) {
        result.clear();
        path.clear();  
        backtracking(n, k, 1);
        return result;
    }
};

class Solution {
private:
    vector<vector<int>> result; 
    vector<int> path; 
    void backtracking(int targetSum, int k, int sum, int startIndex) {
        if (sum > targetSum) { 
            return; 
        }
        if (path.size() == k) {
            if (sum == targetSum) {result.push_back(path);}
            return; // 不相等直接返回
        }
        for (int i = startIndex; i <= 9 - (k - path.size()) + 1; i++) { 
            sum += i; 
            path.push_back(i);
            backtracking(targetSum, k, sum, i + 1); 
            sum -= i; 
            path.pop_back(); 
        }
    }

public:
    vector<vector<int>> combinationSum3(int k, int n) {
        result.clear(); 
        path.clear();  
        backtracking(n, k, 0, 1);
        return result;
    }
};


class Solution {
private:
    const string letterMap[10] = {
        "", // 0
        "", // 1
        "abc", // 2
        "def", // 3
        "ghi", // 4
        "jkl", // 5
        "mno", // 6
        "pqrs", // 7
        "tuv", // 8
        "wxyz", // 9
    };
public:
    vector<string> result;
    string s;
    void backtracking(const string& digits, int index) {
        if (index == digits.size()) {
            result.push_back(s);
            return;
        }
        int digit = digits[index] - '0';        
        string letters = letterMap[digit];      
        for (int i = 0; i < letters.size(); i++) {
            s.push_back(letters[i]);            
            backtracking(digits, index + 1);  //getCombinations(digits, index + 1, s + letters[i]);  
            s.pop_back();                       
        }
    }
    vector<string> letterCombinations(string digits) {
        s.clear();
        result.clear();
        if (digits.size() == 0) {
            return result;
        }
        backtracking(digits, 0);
        return result;
    }
};
