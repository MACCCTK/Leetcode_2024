class Solution {
private:
    int maxCount = 0; 
    int count = 0; 
    TreeNode* pre = NULL;
    vector<int> result;
    void searchBST(TreeNode* cur) {
        if (cur == NULL) return ;
        searchBST(cur->left);       
        if (pre == NULL) { 
            count = 1;
        } else if (pre->val == cur->val) { 
            count++;
        } else { 
            count = 1;
        }
        pre = cur; // 更新上一个节点

        if (count == maxCount) { 
            result.push_back(cur->val);
        }

        if (count > maxCount) { 
            maxCount = count; 
            result.clear();     // 更低频率的值清零
            result.push_back(cur->val);
        }

        searchBST(cur->right);      
        return ;
    }

public:
    vector<int> findMode(TreeNode* root) {
        count = 0;
        maxCount = 0;
        pre = NULL; 
        result.clear();
        searchBST(root);
        return result;
    }
};

class Solution {
public:
    vector<int> findMode(TreeNode* root) {
        stack<TreeNode*> st;
        TreeNode* cur = root;
        TreeNode* pre = NULL;
        int maxCount = 0; 
        int count = 0;
        vector<int> result;
        while (cur != NULL || !st.empty()) {
            if (cur != NULL) { 
                st.push(cur); 
                cur = cur->left;                // 左
            } else {
                cur = st.top();
                st.pop();                      
                if (pre == NULL) { 
                    count = 1;
                } else if (pre->val == cur->val) { 
                    count++;
                } else { 
                    count = 1;
                }
                if (count == maxCount) { 
                    result.push_back(cur->val);
                }

                if (count > maxCount) { 
                    maxCount = count;   
                    result.clear();     
                    result.push_back(cur->val);
                }
                pre = cur;
                cur = cur->right;             
            }
        }
        return result;
    }
};


//无序树
class Solution {
private:

void searchBST(TreeNode* cur, unordered_map<int, int>& map) { 
    if (cur == NULL) return ;
    map[cur->val]++; 
    searchBST(cur->left, map);
    searchBST(cur->right, map);
    return ;
}

bool static cmp (const pair<int, int>& a, const pair<int, int>& b) {
    return a.second > b.second;// key-value
}

public:
    vector<int> findMode(TreeNode* root) {
        unordered_map<int, int> map; // key:元素，value:出现频率
        vector<int> result;
        if (root == NULL) return result;
        searchBST(root, map);
        vector<pair<int, int>> vec(map.begin(), map.end());//创建数组
        sort(vec.begin(), vec.end(), cmp); // 频率排序
        result.push_back(vec[0].first);
        for (int i = 1; i < vec.size(); i++) {
            if (vec[i].second == vec[0].second) result.push_back(vec[i].first);
            else break;
        }
        return result;
    }
};
