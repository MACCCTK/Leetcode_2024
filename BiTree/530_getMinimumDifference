class Solution {
private:
vector<int> vec;
void traversal(TreeNode* root) {
    if (root == NULL) return;
    traversal(root->left);
    vec.push_back(root->val); 
    traversal(root->right);
}
public:
    int getMinimumDifference(TreeNode* root) {
        vec.clear();
        traversal(root);
        if (vec.size() < 2) return 0;
        int result = INT_MAX;
        for (int i = 1; i < vec.size(); i++) { 
            result = min(result, vec[i] - vec[i-1]);
        }
        return result;
    }
};

class Solution {
private:
int result = INT_MAX;
TreeNode* pre = NULL;
void traversal(TreeNode* cur) {
    if (cur == NULL) return;
    traversal(cur->left);   
    if (pre != NULL){       
        result = min(result, cur->val - pre->val);
    }
    pre = cur; 
    traversal(cur->right); 
}
public:
    int getMinimumDifference(TreeNode* root) {
        traversal(root);
        return result;
    }
};

class Solution {
public:
    int getMinimumDifference(TreeNode* root) {
        stack<TreeNode*> st;
        TreeNode* cur = root;
        TreeNode* pre = NULL;
        int result = INT_MAX;
        while (cur != NULL || !st.empty()) {
            if (cur != NULL) { 
                st.push(cur);  
                cur = cur->left;               
            } else {
                cur = st.top();
                st.pop();
                if (pre != NULL) {              
                    result = min(result, cur->val - pre->val);
                }
                pre = cur;
                cur = cur->right;              
            }
        }
        return result;
    }
};
