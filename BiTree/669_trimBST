class Solution {
public:
    TreeNode* trimBST(TreeNode* root, int low, int high) {
        if (root == nullptr ) return nullptr;
        if (root->val < low) {
            TreeNode* right = trimBST(root->right, low, high); 
            return right;
        }
        if (root->val > high) {
            TreeNode* left = trimBST(root->left, low, high); 
            return left;
        }
        root->left = trimBST(root->left, low, high); 
        root->right = trimBST(root->right, low, high);
        return root;
    }
};

class Solution {
public:
    TreeNode* trimBST(TreeNode* root, int L, int R) {
        if (!root) return nullptr;

        while (root != nullptr && (root->val < L || root->val > R)) {
            if (root->val < L) root = root->right; 
            else root = root->left; 
        }
        TreeNode *cur = root;
        // 左子树右枝
        while (cur != nullptr) {
            while (cur->left && cur->left->val < L) {
                cur->left = cur->left->right;
            }
            cur = cur->left;
        }
        cur = root;

        // 右子树左枝
        while (cur != nullptr) {
            while (cur->right && cur->right->val > R) {
                cur->right = cur->right->left;
            }
            cur = cur->right;
        }
        return root;
    }
};
