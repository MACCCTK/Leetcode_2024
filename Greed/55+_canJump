class Solution {
public:
    bool canJump(vector<int>& nums) {
        int count = 0;
        if (nums.size() == 1) return true; 
        for (int i = 0; i <= count; i++) { 
            count = max(i + nums[i], count);
            if (count >= nums.size() - 1) return true; 
        }
        return false;
    }
};


//最短路径
class Solution {
public:
    int jump(vector<int>& nums) {
        int cur = 0;  
        int ans = 0; 
        int next= 0; 
        for (int i = 0; i < nums.size() - 1; i++) { 
            next = max(nums[i] + i, next); 
            if (i == cur) { //在当前的最远边界
                cur = next;      
                ans++;
            }
        }
        return ans;
    }
};
